pipeline {
    agent any
    stages {
        stage('Get Code Develop') {
            agent { label 'git' }
            when {
                branch 'develop'
            }
            steps {
                sh '''
                    echo "Obtenemos el código"
                    whoami
                    uname -a
                    echo ${WORKSPACE}
                '''
                git branch: 'develop', url: 'git@github.com:galopez84/todo-list-aws.git'
                stash name: 'workspace', includes: '**/*'
            }
        }

        stage('Get Code Master') {
            agent { label 'git' }
            when {
                branch 'master'
            }
            steps {
                sh '''
                    echo "Obtenemos el código"
                    whoami
                    uname -a
                    echo ${WORKSPACE}
                '''
                git branch: 'master', url: 'git@github.com:galopez84/todo-list-aws.git'
                stash name: 'workspace', includes: '**/*'
            }
        }

        stage('TEST - STATIC - Flake8 / Bandit') {
            agent { label 'git' }
            when {
                branch 'develop'
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'workspace'
                    sh '''
                        echo "Ejecutamos flake8 para hacer un análisis de código estático"
                        flake8 src/* --format=pylint --exit-zero > flake8.out
                        echo "Ejecutamos bandit para revisar las vulnerabilidades"
                        bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}: [{test_id}] {msg}"
                        whoami
                        uname -a
                    '''
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')]
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')]
                }
            }
        }

        stage('Deploy to Staging') {
            agent { label 'git' }
            when {
                branch 'develop'
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'workspace'
                        sh '''
                            sam validate --region us-east-1 --lint
                            sam build
                            sam deploy --config-env staging --config-file samconfig_R1.toml --stack-name todo-list-aws-staging --region us-east-1 --no-confirm-changeset --no-progressbar --force-upload --no-fail-on-empty-changeset --resolve-s3
                            whoami
                            uname -a
                        '''
                }
            }
        }

        stage('Deploy to Production') {
            agent { label 'git' }
            when {
                branch 'master'
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    unstash 'workspace'
                        sh '''
                            sam build
                            sam deploy template.yaml --config-file samconfig_R2.toml --config-env production --no-confirm-changeset --no-progressbar --force-upload --no-fail-on-empty-changeset
                            whoami
                            uname -a
                            echo ${WORKSPACE}
                        '''
                }
            }
        }

        stage('TEST Rest - STAGING') {
            agent { label 'git' }
            when {
                branch 'develop'
            }
            steps {
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash 'workspace'
                    echo 'Initiating Integration Tests'
                    script {
                        def BASE_URL = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-staging --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text", returnStdout: true).trim()
                        echo "BASE_URL: $BASE_URL"
                        env.BASE_URL = BASE_URL
                    sh '''
                    export PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-rest.xml -s test/integration/todoApiTest.py
                    whoami
                    uname -a
                    '''
                        }
                    } 
                    junit 'result-rest.xml'    
            }
               }

		
            stage('TEST Rest - PRODUCTION') {
            agent { label 'git' }
            when {
                branch 'master'
            }
            steps {
                catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
                    unstash 'workspace'
                        echo 'Initiating Integration Tests'
                        script {
                        def BASE_URL = sh(script: "aws cloudformation describe-stacks --stack-name todo-list-aws-production --query 'Stacks[0].Outputs[?OutputKey==`BaseUrlApi`].OutputValue' --region us-east-1 --output text", returnStdout: true).trim()
                        echo "BASE_URL: $BASE_URL"
                        env.BASE_URL = BASE_URL
                    sh '''
                    export PYTHONPATH=%WORKSPACE%
                    pytest --junitxml=result-rest.xml -s test/integration/todoApiTestProduction.py
                    whoami
                    uname -a
                    echo ${WORKSPACE}
                    '''
            }
                    } 
                    junit 'result-rest.xml'    
            }
               }


        stage('Promote'){
            agent { label 'git' } 
            when {
                branch 'develop'
            }
            steps{
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                unstash 'workspace'
                sh script: """
                    git config user.email "jenkins_pipepline@example.com"
                    git config user.name "Jenkins1"
                    git checkout develop
                    git checkout master
                    git merge develop
                    git push origin master
                    git checkout develop
                    whoami
                    uname -a
                """, label: "Mergeando a Master"
                }
            }
        }


		        stage('Clean WSpace in all Nodes') {
            parallel {
                stage('Clean WSpace test node') {
                    agent { label 'git' }
                    steps {
                        sh '''
                            whoami
                            uname -a
                            echo ${WORKSPACE}
                        ''' 
                        script {
                            // Limpieza después de realizar las operaciones necesarias
                            cleanWs()
                        }
                    }
                }

            }
        }

    }

}
